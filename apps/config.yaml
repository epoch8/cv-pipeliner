backend:
  system:
    use_gpu: false

  models:
    detection:
      - object_detection_api:  # load from Object Detection API checkpoint
          description: 'Object Detection API model (from checkpoint)'
          config_path: 'path1'
          checkpoint_path: 'path2'
          score_threshold: 0.3
          model_index: 'model_index1'
          class_names: null

      - object_detection_api_pb:   # load from Object Detection API saved_model.pb
          description: 'Object Detection API model (from saved_model.pb)'
          saved_model_dir: 'saved_model_dir/'
          input_type: 'float_image_tensor'  # 'image_tensor', 'float_image_tensor', 'encoded_image_string_tensor'
          score_threshold: 0.3
          model_index: 'model_index2'
          class_names: null

      - object_detection_api_tflite:  # load from Object Detection API TFLite dynamic graph
          description: 'Object Detection API model (from TFLite)'
          model_path: 'path4'
          bboxes_output_index: 0
          scores_output_index: 1
          score_threshold: 0.3
          model_index: 'model_index3'
          class_names: null

      - object_detection_api_kfserving:  # load from Object Detection API (KFServing)
          description: 'Object Detection API model (from url)'
          url: 'url:predict'
          input_name: 'input_name'
          score_threshold: 0.3
          model_index: 'model_index4'
          class_names: null

    classification:
      - tensorflow_cls_model:
          description: 'Classficiation Tensorflow Keras Model'
          input_size: (224, 224)
          preprocess_input_script_file: 'preprocess_input.py'  # must have function preprocess_input(input: List[np.ndarray]) -> np.ndarray
          class_names: 'class_names.json'
          model_path: 'path5'
          saved_model_type: 'tf.keras'  # 'tf.saved_model', 'tf.keras', 'tflite'
          model_index: 'model_index5'

      - tensorflow_cls_model_kfserving:  # load from Object Detection API (KFServing)
          description: 'Classficiation Tensorflow Keras Model (from url)'
          url: 'url:predict'
          input_name: 'input_name'
          input_size: (224, 224)
          preprocess_input_script_file: 'preprocess_input.py'  # must have function preprocess_input(input: List[np.ndarray]) -> np.ndarray
          class_names: 'class_names.json'
          model_index: 'model_index6'

      - dummy_cls_model:
          description: 'Classficiation Tensorflow Keras Dummy Model'
          default_class_name: 'dummy'
          model_index: 'model_index7'

    pipeline:
      - pipeline_model:
          description: 'Pipeline Model (from above)'
          detection_model_index: 'model_index1'
          classification_model_index: 'model_index1'

data:  
  base_labels_images: 'renders/*.png'
  labels_decriptions: 'label_to_description.json'
  ann_class_names: 'ann_class_names.json'
  label_to_category: 'label_to_category.json'

  images_dirs:
      - 'images_dir_with_annotation/':
          - 'path_to_annotations/annotations_filename.json'
      - 'images_dir_without_annotation/': []
  images_annotation_type: 'brickit'

  minimum_iou: 0.5
